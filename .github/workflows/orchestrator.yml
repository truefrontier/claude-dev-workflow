name: Orchestrator Workflow

on:
  issue_comment:
    types: [created]

jobs:
  orchestrator:
    if: >
      github.event.issue.state == 'open' &&
      contains(github.event.comment.body, '@claude-dev-truefrontier') &&
      github.event.comment.user.type == 'User'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Get current issue state and prevent bot loops
        id: check-state
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            // Prevent orchestrator from responding to its own comments or stage workflow comments
            const comment = context.payload.comment;
            const commentBody = comment.body;
            const isFromBot = comment.user.login === 'github-actions[bot]';
            
            console.log('Comment user:', comment.user.login);
            console.log('Comment is from bot:', isFromBot);
            
            if (isFromBot) {
              console.log('Skipping - comment is from GitHub Actions bot');
              core.setOutput('should_skip', 'true');
              return;
            }
            
            // Get current labels
            const labels = issue.labels.map(label => label.name);
            const workflowLabels = labels.filter(label => 
              label.startsWith('needs:') || 
              label.startsWith('review:') || 
              label.startsWith('error:')
            );
            
            console.log('Current labels:', labels);
            console.log('Workflow labels:', workflowLabels);
            console.log('Comment:', commentBody);
            
            // Store state for orchestrator logic
            core.setOutput('current_labels', JSON.stringify(labels));
            core.setOutput('workflow_labels', JSON.stringify(workflowLabels));
            core.setOutput('comment_body', commentBody);
            core.setOutput('comment_user', comment.user.login);
            core.setOutput('current_assignees', JSON.stringify(issue.assignees || []));
            core.setOutput('should_skip', 'false');

      - name: Run Orchestrator Logic
        if: steps.check-state.outputs.should_skip == 'false'
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          trigger_phrase: "@claude-dev-truefrontier"
          use_sticky_comment: true
          allowed_bots: 'claude[bot]'
          claude_args: |
            --allowedTools "Read,mcp__github_comment__create_comment,mcp__github_comment__update_claude_comment,mcp__github__*"
          prompt: |
            You are the Orchestrator for a GitHub AI workflow system. Your job is to interpret human feedback and manage workflow state transitions.

            <context>
              <issue_number>${{ github.event.issue.number }}</issue_number>
              <current_labels>${{ steps.check-state.outputs.current_labels }}</current_labels>
              <workflow_labels>${{ steps.check-state.outputs.workflow_labels }}</workflow_labels>
              <current_assignees>${{ steps.check-state.outputs.current_assignees }}</current_assignees>
              <human_comment>${{ steps.check-state.outputs.comment_body }}</human_comment>
              <human_user>${{ steps.check-state.outputs.comment_user }}</human_user>
            </context>

            ## Your Role
            You interpret natural language from humans and manage the workflow state machine. The system has these states:
            - `needs:*` - Stage is actively being worked on by @claude-dev-truefrontier (if user exists)
            - `review:*` - Stage complete, awaiting human review (human assigned)
            - `error:*` - Stage encountered error, needs human attention (human assigned)

            ## State Transitions You Manage

            ### From No Labels (Fresh Issue)
            - Human mentions @claude-dev-truefrontier → Add `needs:specify`, assign @claude-dev-truefrontier if user exists

            ### From review:* states
            - Human approves → Remove `review:X`, add next `needs:Y`, assign @claude-dev-truefrontier if user exists
            - Human requests changes → Remove `review:X`, add `needs:X-revision`, assign @claude-dev-truefrontier if user exists
            - Human wants to skip stages → Remove `review:X`, add appropriate `needs:Y`, assign @claude-dev-truefrontier if user exists

            ### From error:* states  
            - Human requests changes/revision/retry → Remove `error:X`, add `needs:X-revision`, assign @claude-dev-truefrontier if user exists
            - Human requests skip/continue → Remove `error:X`, add next `needs:Y`, assign @claude-dev-truefrontier if user exists

            ### Stop Commands
            - Human says stop/unassign → Remove ALL workflow labels, unassign @claude-dev-truefrontier if assigned

            ## Stage Flow Order
            1. `specify` → `plan` → `tasks` → `develop` (required full flow)
            2. All stages are required and must be completed in sequence
            3. Each stage must be reviewed and approved by a human before proceeding to the next stage

            ## Rules
            1. ONLY ONE workflow label at a time per issue
            2. `needs:*` labels mean @claude-dev-truefrontier is assigned (if user exists)
            3. `review:*` and `error:*` labels mean human is assigned  
            4. Always explain what you're doing in your response
            5. If unclear, ask for clarification and don't change labels

            ## Actions You Can Take
            Use GitHub MCP tools to manage issues and gather information:
            - Use `mcp__github__update_issue` to add/remove labels and assignees
            - Use `mcp__github__get_issue_comments` to retrieve recent comments for additional context
            - For user verification: Use available GitHub MCP user tools as needed
            - The update_issue tool accepts: assignees (string[]), labels (string[]), and other issue properties
            - The get_issue_comments tool accepts: issue_number, owner, repo, page, perPage (1-100)
            
            ## CRITICAL: User Assignment Check
            BEFORE attempting to assign @claude-dev-truefrontier, you MUST check if this user can be assigned:
            1. Use GitHub MCP tools to verify if the user exists and can be assigned to issues
            2. If the user check succeeds, proceed with assignment
            3. If the user doesn't exist or can't be assigned, skip the assignment step
            
            ## ORDER: When transitioning to needs:* states
            1. Check if claude-dev-truefrontier user can be assigned using GitHub MCP tools
            2. If user exists: Use `mcp__github__update_issue` to assign @claude-dev-truefrontier FIRST
            3. THEN use `mcp__github__update_issue` to add the needs:* label (this triggers the stage workflow)

            Example workflow using mcp__github__update_issue:
            1. Verify user existence if needed using GitHub MCP tools
            2. If user can be assigned: Call `mcp__github__update_issue` with assignees: ["claude-dev-truefrontier"]
            3. Call `mcp__github__update_issue` with labels including the appropriate `needs:*` label
            4. Always explain what actions you're taking and why

            ## Your Task
            Based on the human comment and current state, determine the appropriate action and execute it. Always explain your reasoning and what transition you're making. When assigning users, always check if they can be assigned first.

            You can use `mcp__github__get_issue_comments` to retrieve recent issue comments if you need additional context beyond what's provided to better understand the conversation flow and make informed decisions.