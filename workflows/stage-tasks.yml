name: Stage - Tasks

on:
  issues:
    types: [labeled]

jobs:
  tasks:
    if: >
      github.event.issue.state == 'open' &&
      (contains(github.event.issue.labels.*.name, 'needs:tasks') ||
       contains(github.event.issue.labels.*.name, 'needs:tasks-revision'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      actions: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup stage context
        id: setup
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            // Get recent comments for context
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 25
            });

            // Filter out deleted/empty comments and get non-bot comments
            const validComments = comments.data.filter(comment =>
              comment.body &&
              comment.body.trim() !== '' &&
              !comment.body.includes('[DELETED]')
            );

            // Check if this is initial tasks or revision
            const labels = issue.labels.map(label => label.name);
            const isRevision = labels.includes('needs:tasks-revision');

            // Find the last human who mentioned the bot (for assignment later)
            const lastHumanComment = validComments
              .reverse()
              .find(comment =>
                comment.user.type === 'User' &&
                comment.body.includes('@claude-dev-truefrontier')
              );

            const lastHumanUser = lastHumanComment ? lastHumanComment.user.login : null;
            core.setOutput('is_revision', isRevision.toString());
            core.setOutput('issue_details', JSON.stringify({
              ISSUE_NUMBER: context.issue.number,
              ASSIGNEES: issue.assignees || [],
              STATE: issue.state,
              CREATED_AT: issue.created_at,
              UPDATED_AT: issue.updated_at,
            }));
            core.setOutput('issue_description', issue.body || '');
            core.setOutput('recent_comments', JSON.stringify(validComments));
            core.setOutput('last_human_user', lastHumanUser);

      - name: Run Task Breakdown
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          use_sticky_comment: true
          allowed_bots: 'claude[bot]'
          claude_args: |
            --allowedTools "Glob,Grep,Read,TodoWrite,mcp__github__get_issue_comments,mcp__github__add_issue_comment"
          prompt: |
            You are breaking down technical implementation plans into specific, actionable development tasks.

            <context>
              <issue_details>${{ steps.setup.outputs.issue_details }}</issue_details>
              <issue_description>${{ steps.setup.outputs.issue_description }}</issue_description>
              <recent_comments>${{ steps.setup.outputs.recent_comments }}</recent_comments>
              <is_revision>${{ steps.setup.outputs.is_revision }}</is_revision>
              <last_human_user>${{ steps.setup.outputs.last_human_user }}</last_human_user>
            </context>

            ## Your Task
            ${{ steps.setup.outputs.is_revision == 'true' && '
            This is a REVISION based on previous feedback. Review the recent comments to understand what changes were requested and address them in your updated task breakdown.
            ' || '
            This is INITIAL TASK BREAKDOWN. Create a detailed breakdown of implementation tasks based on the specifications and technical plan provided.
            ' }}

            ## CRITICAL: Always Post Comment
            You MUST post a comment with your task breakdown. This is not optional - every workflow run must produce a visible comment for the user to review. Your task breakdown will automatically be posted as a comment to the issue.

            ## Task Breakdown Process
            1. Use `mcp__github__get_issue_comments` to review all previous comments, especially the approved specifications and technical plan
            2. Analyze the existing codebase structure and files that need modification
            3. Break down the implementation into specific, manageable tasks
            4. Prioritize tasks and identify dependencies
            5. Estimate complexity and identify potential challenges
            6. Create clear, actionable tasks that can be implemented step-by-step

            ## Output Format
            Present your task breakdown as a structured document:

            ```
            # Development Task Breakdown

            **Feature:** [Feature Name]
            **Issue:** #${{ github.event.issue.number }}
            **Date:** [Current Date]
            **Technical Plan:** Reference to approved technical plan in previous comments
            **Status:** Ready for Review

            ## What I'm Doing
            I've broken down the approved technical plan into specific, actionable development tasks following a systematic approach. This task breakdown transforms the high-level technical approach into concrete, numbered tasks that can be implemented with Test-Driven Development (TDD), clear dependencies, and measurable success criteria.

            ## Task Generation Summary
            Tasks derived from:
            - ✅ Approved specifications and requirements
            - ✅ Technical plan and architecture decisions
            - ✅ Component contracts and interfaces
            - ✅ Data models and API design
            - ✅ User stories and acceptance criteria

            ## Implementation Tasks

            ### Setup & Foundation Phase
            **Sequential Tasks (must be completed in order):**

            - [ ] **T001**: [Specific setup task] - [File/component to create/modify]
              - **Type:** Setup | **Estimated Time:** [X hours] | **Dependencies:** None
              - **Acceptance:** [Specific measurable criteria]

            - [ ] **T002**: [Environment/config task] - [Configuration files to modify]
              - **Type:** Configuration | **Estimated Time:** [X hours] | **Dependencies:** T001
              - **Acceptance:** [Specific measurable criteria]

            ### Test-Driven Development Phase
            **TDD Approach - Write Tests First:**

            - [ ] **T003**: [Write unit tests for core component] - [Test files to create]
              - **Type:** Testing | **Estimated Time:** [X hours] | **Dependencies:** T002
              - **Acceptance:** [Test coverage and passing criteria]

            - [ ] **T004**: [Write integration tests] - [Test files to create]
              - **Type:** Testing | **Estimated Time:** [X hours] | **Dependencies:** T003
              - **Acceptance:** [Integration test success criteria]

            ### Core Implementation Phase
            **Parallel Tasks [P] can be worked on simultaneously:**

            - [ ] **T005** [P]: [Implement data model] - [Model files to create/modify]
              - **Type:** Data Layer | **Estimated Time:** [X hours] | **Dependencies:** T004
              - **Acceptance:** [Model validation and test passing criteria]

            - [ ] **T006** [P]: [Implement service layer] - [Service files to create/modify]
              - **Type:** Business Logic | **Estimated Time:** [X hours] | **Dependencies:** T004
              - **Acceptance:** [Service functionality and test passing criteria]

            - [ ] **T007**: [Implement API endpoints] - [Controller/route files to modify]
              - **Type:** API Layer | **Estimated Time:** [X hours] | **Dependencies:** T005, T006
              - **Acceptance:** [API response and functionality criteria]

            ### Integration & Features Phase

            - [ ] **T008**: [Integrate components] - [Integration files to modify]
              - **Type:** Integration | **Estimated Time:** [X hours] | **Dependencies:** T007
              - **Acceptance:** [End-to-end functionality criteria]

            - [ ] **T009** [P]: [Implement UI components] - [UI files to create/modify]
              - **Type:** Frontend | **Estimated Time:** [X hours] | **Dependencies:** T007
              - **Acceptance:** [UI functionality and design criteria]

            ### Validation & Polish Phase

            - [ ] **T010**: [Performance optimization] - [Files to optimize]
              - **Type:** Performance | **Estimated Time:** [X hours] | **Dependencies:** T008, T009
              - **Acceptance:** [Performance benchmark criteria]

            - [ ] **T011**: [Security validation] - [Security measures to implement]
              - **Type:** Security | **Estimated Time:** [X hours] | **Dependencies:** T008
              - **Acceptance:** [Security audit and test criteria]

            ## Dependency Graph
            ```
            T001 → T002 → T003 → T004 → [T005, T006] → T007 → T008 → T010
                                    ↓           ↓       ↓
                                   T009 ----→ T011 → [Complete]
            ```

            ## Task Rules Applied
            - ✅ **Modular**: Each task is independent and focused
            - ✅ **Testable**: Every implementation task has corresponding tests
            - ✅ **Sequential Logic**: Dependencies ensure proper build order
            - ✅ **Parallel Opportunities**: [P] tasks can be worked simultaneously
            - ✅ **Measurable**: Each task has specific acceptance criteria

            ## Files & Components Analysis

            ### New Files to Create:
            - [ ] `[path/to/test-file.spec.js]` - [Purpose and test coverage]
            - [ ] `[path/to/model-file.js]` - [Data model and validation]
            - [ ] `[path/to/service-file.js]` - [Business logic implementation]

            ### Existing Files to Modify:
            - [ ] `[path/to/existing-file.js]` - [Specific changes needed]
            - [ ] `[path/to/config-file.json]` - [Configuration updates]

            ## Risk Assessment & Mitigation
            - **High-Risk Tasks:** [T007, T008] - Complex integration points
              - **Mitigation:** Extra testing, incremental integration
            - **Medium-Risk Tasks:** [T005, T006] - Core business logic
              - **Mitigation:** TDD approach, thorough unit testing
            - **Parallel Risk:** [T005, T006, T009] - Potential merge conflicts
              - **Mitigation:** Clear interface contracts, frequent integration

            ## Validation Checklist
            - [ ] All tasks reference specific requirements from specifications
            - [ ] Each task has measurable acceptance criteria
            - [ ] Dependencies are clearly mapped and logical
            - [ ] Test-driven approach is maintained throughout
            - [ ] Parallel tasks are properly identified
            - [ ] File paths and components are specific and actionable

            ## Success Criteria
            **Technical Completion:**
            - [ ] All numbered tasks completed successfully
            - [ ] All tests passing (unit, integration, end-to-end)
            - [ ] Code follows project conventions and standards
            - [ ] Performance benchmarks met
            - [ ] Security requirements satisfied

            **Business Completion:**
            - [ ] All specification requirements implemented
            - [ ] Acceptance criteria from user stories met
            - [ ] Feature ready for production deployment

            **Next Steps:** Review this task breakdown and verify each task is clear and actionable. Check any tasks that need modification or clarification. Then mention @claude-dev-truefrontier to proceed to development implementation.
            ```

            ## Required Actions (Execute in Order)

            **1. FIRST: Always Post Your Task Breakdown Comment Above**
            - You MUST explicitly call `mcp__github_comment__create_comment` or `mcp__github_comment__update_claude_comment` to post the complete task breakdown with checkboxes as a comment
            - Include the formatted task breakdown document in the comment body
            - Do not proceed to step 2 until you have successfully posted the comment using the MCP tool

            **2. THEN: Update Workflow State**
            Only after successfully posting your task breakdown comment, execute these commands:

            ```bash
            # Remove the current stage label
            gh issue edit ${{ github.event.issue.number }} \
              --remove-label "needs:tasks" \
              --remove-label "needs:tasks-revision"

            # Set to review state and assign to human
            gh issue edit ${{ github.event.issue.number }} \
              --add-label "review:tasks" \
              --add-assignee "${{ steps.setup.outputs.last_human_user }}"
            ```

            Focus on creating specific, actionable tasks that a developer can follow step-by-step. Each task should clearly specify what file to modify and what changes to make. Use your analysis of the existing codebase to ensure tasks are realistic and properly scoped.