name: Stage - Architecture

on:
  issues:
    types: [labeled]

jobs:
  architecture:
    if: >
      github.event.issue.state == 'open' &&
      (contains(github.event.issue.labels.*.name, 'needs:architect') ||
       contains(github.event.issue.labels.*.name, 'needs:architect-revision'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      actions: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup stage context
        id: setup
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            // Get recent comments for context (more for architecture stage)
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 20
            });

            // Filter out deleted/empty comments
            const validComments = comments.data.filter(comment => 
              comment.body && 
              comment.body.trim() !== '' && 
              !comment.body.includes('[DELETED]')
            );

            // Check if this is initial architecture or revision
            const labels = issue.labels.map(label => label.name);
            const isRevision = labels.includes('needs:architect-revision');
            
            // Find the last human who mentioned the bot
            const lastHumanComment = validComments
              .reverse()
              .find(comment => 
                comment.user.type === 'User' && 
                comment.body.includes('@claude-dev-truefrontier')
              );
            
            const lastHumanUser = lastHumanComment ? lastHumanComment.user.login : null;
            core.setOutput('is_revision', isRevision.toString());
            core.setOutput('issue_details', JSON.stringify({
              ISSUE_NUMBER: context.issue.number,
              ASSIGNEES: issue.assignees || [],
              STATE: issue.state,
              CREATED_AT: issue.created_at,
              UPDATED_AT: issue.updated_at,
            }));
            core.setOutput('issue_description', issue.body || '');
            core.setOutput('recent_comments', JSON.stringify(validComments));
            core.setOutput('last_human_user', lastHumanUser);

      - name: Run Architecture Design
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          use_sticky_comment: true
          claude_args: |
            --allowedTools "Bash(gh:*),Bash(git:*),Read,Glob,Grep,mcp__github_comment__create_comment,mcp__github_comment__update_claude_comment"
          prompt: |
            You are acting as a Technical Architect creating comprehensive technical design for a complex feature.

            <context>
              <issue_details>${{ steps.setup.outputs.issue_details }}</issue_details>
              <issue_description>${{ steps.setup.outputs.issue_description }}</issue_description>
              <recent_comments>${{ steps.setup.outputs.recent_comments }}</recent_comments>
              <is_revision>${{ steps.setup.outputs.is_revision }}</is_revision>
              <last_human_user>${{ steps.setup.outputs.last_human_user }}</last_human_user>
            </context>

            ## Your Task
            ${{ steps.setup.outputs.is_revision == 'true' && '
            This is a REVISION based on previous feedback. Review the recent comments to understand what changes were requested to the architecture and address them thoroughly.
            ' || '
            This is INITIAL ARCHITECTURE DESIGN. Create comprehensive technical design based on approved triage items and BDD specification from previous comments.
            ' }}

            ## CRITICAL: Always Post Comment
            You MUST post a comment with your complete architecture document. This is not optional - every workflow run must produce a visible comment for the user to review. Your architecture design will automatically be posted as a comment to the issue.

            ## Architecture Document Requirements

            Create a comprehensive architecture document with these sections:

            ### 1. System Architecture Overview
            - High-level system design and component relationships
            - Integration with existing Laravel 9 application structure
            - Mermaid diagrams showing system architecture

            ### 2. Component Design
            - Detailed component specifications and interfaces
            - Laravel-specific implementations (Models, Controllers, Services)
            - Component interaction patterns

            ### 3. Data Architecture  
            - Database schema design and migrations
            - Data flow and storage strategy
            - Eloquent model relationships and scopes

            ### 4. API Design
            - Endpoint specifications with request/response formats
            - Route definitions and middleware requirements
            - Authentication and authorization patterns

            ### 5. Security Architecture
            - Authentication approach (Sanctum/JWT)
            - Authorization policies and gates
            - Data validation and sanitization strategy

            ### 6. Performance & Scalability
            - Caching strategies (Redis usage)
            - Query optimization approaches
            - Scalability considerations for Laravel Vapor

            ### 7. Integration Points
            - Frontend integration (Vue 3 + Inertia.js)
            - External API integrations
            - Queue and job processing requirements

            ### 8. Error Handling & Monitoring
            - Error handling patterns
            - Logging and monitoring (Bugsnag integration)
            - Graceful failure scenarios

            ### 9. Testing Strategy
            - Unit testing approach with PHPUnit
            - Feature testing patterns
            - BDD testing implementation

            ### 10. Implementation Phases
            - Phased development and delivery plan
            - Dependencies between components
            - Risk mitigation strategies

            ## Include Technical Details
            - Mermaid diagrams for visual representation
            - Database schema examples
            - Code patterns and interfaces
            - Laravel-specific best practices
            - Performance optimization approaches

            ## Focus Areas
            - Complex technical aspects requiring upfront design
            - Integration with existing codebase architecture
            - Scalability and maintainability considerations
            - Security and performance implications

            ## Required Actions (Execute in Order)
            
            **1. FIRST: Always Post Your Architecture Document Comment Above**
            - Post the complete architecture document with all 10 sections as a comment
            - Include Mermaid diagrams, technical specifications, and implementation guidance
            - This happens automatically when you include the document in your response
            - Do not proceed to step 2 until the comment is posted
            
            **2. THEN: Update Workflow State**
            Only after successfully posting your architecture document comment, execute these commands:

            ```bash
            # Remove the current stage label
            gh issue edit ${{ github.event.issue.number }} \
              --remove-label "needs:architect" \
              --remove-label "needs:architect-revision"

            # Set to review state and assign to human
            gh issue edit ${{ github.event.issue.number }} \
              --add-label "review:architect" \
              --add-assignee "${{ steps.setup.outputs.last_human_user }}"
            ```

            Create a thorough architecture that will guide successful implementation.