name: Stage - Triage

on:
  issues:
    types: [labeled]

jobs:
  triage:
    if: >
      github.event.issue.state == 'open' &&
      (contains(github.event.issue.labels.*.name, 'needs:triage') ||
       contains(github.event.issue.labels.*.name, 'needs:triage-revision'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      actions: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup stage context
        id: setup
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            // Get recent comments for context
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 10
            });

            // Filter out deleted/empty comments and get non-bot comments
            const validComments = comments.data.filter(comment => 
              comment.body && 
              comment.body.trim() !== '' && 
              !comment.body.includes('[DELETED]')
            );

            // Check if this is initial triage or revision
            const labels = issue.labels.map(label => label.name);
            const isRevision = labels.includes('needs:triage-revision');
            
            // Find the last human who mentioned the bot (for assignment later)
            const lastHumanComment = validComments
              .reverse()
              .find(comment => 
                comment.user.type === 'User' && 
                comment.body.includes('@claude-dev-truefrontier')
              );
            
            const lastHumanUser = lastHumanComment ? lastHumanComment.user.login : null;
            core.setOutput('is_revision', isRevision.toString());
            core.setOutput('issue_details', JSON.stringify({
              ISSUE_NUMBER: context.issue.number,
              ASSIGNEES: issue.assignees || [],
              STATE: issue.state,
              CREATED_AT: issue.created_at,
              UPDATED_AT: issue.updated_at,
            }));
            core.setOutput('issue_description', issue.body || '');
            core.setOutput('recent_comments', JSON.stringify(validComments));
            core.setOutput('last_human_user', lastHumanUser);

      - name: Run Triage Analysis
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          use_sticky_comment: true
          allowed_bots: 'claude[bot]'
          claude_args: |
            --allowedTools "Bash(gh:*),Bash(git:*),Read,Glob,Grep,mcp__github_comment__create_comment,mcp__github_comment__update_claude_comment"
          prompt: |
            You are conducting triage analysis for a software development issue.

            <context>
              <issue_details>${{ steps.setup.outputs.issue_details }}</issue_details>
              <issue_description>${{ steps.setup.outputs.issue_description }}</issue_description>
              <recent_comments>${{ steps.setup.outputs.recent_comments }}</recent_comments>
              <is_revision>${{ steps.setup.outputs.is_revision }}</is_revision>
              <last_human_user>${{ steps.setup.outputs.last_human_user }}</last_human_user>
            </context>

            ## Your Task
            ${{ steps.setup.outputs.is_revision == 'true' && '
            This is a REVISION based on previous feedback. Review the recent comments to understand what changes were requested and address them in your updated analysis.
            ' || '
            This is INITIAL TRIAGE. Conduct a comprehensive analysis of the issue and codebase.
            ' }}

            ## CRITICAL: Always Post Comment
            You MUST post a comment with your triage analysis. This is not optional - every workflow run must produce a visible comment for the user to review. Your analysis will automatically be posted as a comment to the issue.

            ## Analysis Process
            1. Review the issue and codebase thoroughly
            2. Evaluate in four key areas:
               - What's working (keep it)
               - What needs fixing  
               - What needs clarification from the user
               - What might be missing

            ## Output Format
            Present your findings as a structured analysis with checkboxes for user selection:

            ```
            # Triage Analysis

            [Brief TL;DR summary of the issue]

            ## What I Found
            [Your analysis of the current codebase and issue]

            ## What's Working ‚úÖ (check items to keep)
            - [ ] Item 1: Description
            - [ ] Item 2: Description

            ## Needs Fixing üîß (check items to fix) 
            - [ ] Item 1: Description
            - [ ] Item 2: Description

            ## Needs Adding ‚ûï (check items to add)
            - [ ] Item 1: Description  
            - [ ] Item 2: Description

            ## Needs Clarification ‚ùì (check preferred options)
            1. Clarification topic 1
               - [ ] Option A
               - [ ] Option B
            2. Clarification topic 2
               - [ ] Option A  
               - [ ] Option B

            **Next Steps:** Check the items you want included in the development process, then mention @claude-dev-truefrontier to proceed.
            ```

            ## Required Actions (Execute in Order)
            
            **1. FIRST: Always Post Your Analysis Comment Above**  
            - Post the complete triage analysis with checkboxes as a comment
            - This happens automatically when you include the analysis in your response
            - Do not proceed to step 2 until the comment is posted
            
            **2. THEN: Update Workflow State**
            Only after successfully posting your analysis comment, execute these commands:

            ```bash
            # Remove the current stage label
            gh issue edit ${{ github.event.issue.number }} \
              --remove-label "needs:triage" \
              --remove-label "needs:triage-revision"

            # Set to review state and assign to human
            gh issue edit ${{ github.event.issue.number }} \
              --add-label "review:triage" \
              --add-assignee "${{ steps.setup.outputs.last_human_user }}"
            ```

            Focus on actionable, specific items that will help guide development. Be thorough but concise.