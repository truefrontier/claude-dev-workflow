name: Stage - Specification

on:
  issues:
    types: [labeled]

jobs:
  specification:
    if: >
      github.event.issue.state == 'open' &&
      (contains(github.event.issue.labels.*.name, 'needs:spec') ||
       contains(github.event.issue.labels.*.name, 'needs:spec-revision'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      actions: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup stage context
        id: setup
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            // Get recent comments for context (more for spec stage)
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 15
            });

            // Filter out deleted/empty comments
            const validComments = comments.data.filter(comment => 
              comment.body && 
              comment.body.trim() !== '' && 
              !comment.body.includes('[DELETED]')
            );

            // Check if this is initial spec or revision
            const labels = issue.labels.map(label => label.name);
            const isRevision = labels.includes('needs:spec-revision');
            
            // Find the last human who mentioned the bot
            const lastHumanComment = validComments
              .reverse()
              .find(comment => 
                comment.user.type === 'User' && 
                comment.body.includes('@claude-dev-truefrontier')
              );
            
            const lastHumanUser = lastHumanComment ? lastHumanComment.user.login : null;
            core.setOutput('is_revision', isRevision.toString());
            core.setOutput('issue_details', JSON.stringify({
              ISSUE_NUMBER: context.issue.number,
              ASSIGNEES: issue.assignees || [],
              STATE: issue.state,
              CREATED_AT: issue.created_at,
              UPDATED_AT: issue.updated_at,
            }));
            core.setOutput('issue_description', issue.body || '');
            core.setOutput('recent_comments', JSON.stringify(validComments));
            core.setOutput('last_human_user', lastHumanUser);

      - name: Run Specification Development
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          use_sticky_comment: true
          allowed_bots: 'claude[bot]'
          claude_args: |
            --allowedTools "Bash(gh:*),Bash(git:*),Read,Glob,Grep,mcp__github_comment__create_comment,mcp__github_comment__update_claude_comment"
          prompt: |
            You are acting as a Business Analyst creating BDD specification based on approved triage items.

            <context>
              <issue_details>${{ steps.setup.outputs.issue_details }}</issue_details>
              <issue_description>${{ steps.setup.outputs.issue_description }}</issue_description>
              <recent_comments>${{ steps.setup.outputs.recent_comments }}</recent_comments>
              <is_revision>${{ steps.setup.outputs.is_revision }}</is_revision>
              <last_human_user>${{ steps.setup.outputs.last_human_user }}</last_human_user>
            </context>

            ## Your Task
            ${{ steps.setup.outputs.is_revision == 'true' && '
            This is a REVISION based on previous feedback. Review the recent comments to understand what changes were requested to the specification and address them.
            ' || '
            This is INITIAL SPECIFICATION. Create a comprehensive BDD feature file based on the approved triage items from the issue comments.
            ' }}

            ## CRITICAL: Always Post Comment
            You MUST post a comment with your BDD specification. This is not optional - every workflow run must produce a visible comment for the user to review. Your specification will automatically be posted as a comment to the issue.

            ## Process
            1. **Review Context**: Analyze the issue description and approved triage items from comments
            2. **Use BDD Agent**: Delegate the specification creation to the bdd-gherkin-writer agent for proper Gherkin format
            3. **Create Feature File**: Ensure the spec includes:
               - Feature description with business value (As a... I want... So that...)
               - Background section for common preconditions
               - Scenario coverage for main use cases and edge cases
               - Given-When-Then format with concrete examples
               - Scenario outlines for parameterized testing where applicable
               - Error conditions and validation scenarios

            ## BDD Specification Requirements
            - Focus on approved/checked items from triage phase
            - Cover happy paths and error conditions comprehensively
            - Use concrete examples rather than abstract descriptions
            - Include boundary conditions and edge cases
            - Make scenarios testable and implementable

            ## Example Format Structure
            ```gherkin
            Feature: [Feature Name]
              As a [type of user]
              I want [goal]  
              So that [benefit]

              Background:
                Given [common setup conditions]

              Scenario: [Main use case]
                Given [precondition]
                When [user action]
                Then [expected result]
                And [additional verification]

              Scenario: [Error handling]
                Given [error condition setup]
                When [action that should fail]
                Then [error response expected]

              Scenario Outline: [Parameterized test]
                Given [condition with <parameter>]
                When [action with <parameter>]
                Then [result with <parameter>]
                
                Examples:
                  | parameter | value1 | value2 |
                  | case1     | data1  | data2  |
            ```

            ## Required Actions (Execute in Order)
            
            **1. FIRST: Always Post Your Specification Comment Above**
            - Post the complete BDD specification in Gherkin format as a comment
            - This happens automatically when you include the specification in your response
            - Do not proceed to step 2 until the comment is posted
            
            **2. THEN: Update Workflow State**
            Only after successfully posting your specification comment, execute these commands:

            ```bash
            # Remove the current stage label
            gh issue edit ${{ github.event.issue.number }} \
              --remove-label "needs:spec" \
              --remove-label "needs:spec-revision"

            # Set to review state and assign to human  
            gh issue edit ${{ github.event.issue.number }} \
              --add-label "review:spec" \
              --add-assignee "${{ steps.setup.outputs.last_human_user }}"
            ```

            Be thorough in coverage while keeping scenarios clear and implementable. The specification will guide the development phase.